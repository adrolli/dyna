<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards">
    <description>The Coding standard for the WordPress Coding Standards itself.</description>

    <file>.</file>

    <arg value="sp"/>
    <arg name="extensions" value="php"/>

    <!-- Exclude the code in the PHPCS 2.x test files copied in from PHPCS. -->
    <exclude-pattern>/Test/AllTests.php</exclude-pattern>
    <exclude-pattern>/Test/Standards/*.php</exclude-pattern>
    <exclude-pattern>/bin/class-ruleset-test.php</exclude-pattern>

    <!-- Exclude Composer vendor directory. -->
    <exclude-pattern>*/vendor/*</exclude-pattern>

    <rule ref="WordPress-Extra">
        <exclude name="WordPress.Files.FileName"/>
        <exclude name="WordPress.NamingConventions.ValidVariableName"/>
        <exclude name="WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>
    </rule>

    <rule ref="WordPress-Docs"/>

    <!-- Enforce PSR1 compatible namespaces. -->
    <rule ref="PSR1.Classes.ClassDeclaration"/>

    <rule ref="WordPress.Arrays.MultipleStatementAlignment">
        <properties>
            <property name="alignMultilineItems" value="!=100"/>
        </properties>
    </rule>

    <rule ref="PSR2.Methods.FunctionClosingBrace"/>

    <!-- Check code for cross-version PHP compatibility. -->
    <config name="testVersion" value="5.3-"/>
    <rule ref="PHPCompatibility">
        <!-- Exclude PHP constants back-filled by PHPCS. -->
        <exclude name="PHPCompatibility.PHP.NewConstants.t_finallyFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_yieldFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_ellipsisFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_powFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_pow_equalFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_spaceshipFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_coalesceFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_coalesce_equalFound"/>
        <exclude name="PHPCompatibility.PHP.NewConstants.t_yield_fromFound"/>

        <!-- Unclear how, but appears to be back-filled anyhow, could be that PHP did so before the token was in use. -->
        <exclude name="PHPCompatibility.PHP.NewConstants.t_traitFound"/>
    </rule>

</ruleset>

<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="pcsg-generated-ruleset"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Created with http://edorian.github.com/php-coding-standard-generator/</description>
    <rule ref="rulesets/codesize.xml/CyclomaticComplexity">
        <properties>
            <property name="reportLevel" value="5"/>
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/NPathComplexity"/>
    <rule ref="rulesets/codesize.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="20"/>
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/ExcessiveClassLength">
        <properties>
            <property name="minimum" value="200"/>
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="5"/>
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/ExcessivePublicCount"/>
    <rule ref="rulesets/codesize.xml/TooManyFields"/>
    <rule ref="rulesets/codesize.xml/TooManyMethods"/>
    <rule ref="rulesets/codesize.xml/ExcessiveClassComplexity"/>
    <rule ref="rulesets/controversial.xml"/>
    <rule ref="rulesets/design.xml"/>
    <rule ref="rulesets/naming.xml"/>
    <rule ref="rulesets/unusedcode.xml"/>
</ruleset>